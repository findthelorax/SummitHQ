
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AreaScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  type: 'type',
  description: 'description'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  areaId: 'areaId',
  entityId: 'entityId',
  entityType: 'entityType'
};

exports.Prisma.HoursScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  dayOfWeek: 'dayOfWeek',
  date: 'date',
  openTime: 'openTime',
  closeTime: 'closeTime',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MountainScalarFieldEnum = {
  id: 'id',
  name: 'name',
  latitude: 'latitude',
  longitude: 'longitude',
  height: 'height',
  phoneNumber: 'phoneNumber',
  address: 'address',
  city: 'city',
  state: 'state',
  zipcode: 'zipcode',
  openingDate: 'openingDate',
  closingDate: 'closingDate'
};

exports.Prisma.WeatherScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  date: 'date',
  temperature: 'temperature',
  windSpeed: 'windSpeed',
  windDirection: 'windDirection',
  visibility: 'visibility',
  conditions: 'conditions',
  snowfallRecent: 'snowfallRecent',
  snowfall24h: 'snowfall24h',
  snowfall7d: 'snowfall7d',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeMountainAssignmentScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  assignedAt: 'assignedAt'
};

exports.Prisma.DispatcherAssignmentScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  assignedAt: 'assignedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  department: 'department',
  name: 'name',
  title: 'title',
  position: 'position',
  level: 'level',
  permissions: 'permissions'
};

exports.Prisma.EmployeeRoleScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  roleId: 'roleId'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  employeeIdNumber: 'employeeIdNumber',
  email: 'email',
  phoneNumber: 'phoneNumber',
  name: 'name',
  roleId: 'roleId'
};

exports.Prisma.LiftScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  type: 'type',
  status: 'status',
  capacity: 'capacity',
  latitude: 'latitude',
  longitude: 'longitude',
  locationId: 'locationId'
};

exports.Prisma.TrailScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  difficulty: 'difficulty',
  status: 'status',
  length: 'length',
  latitude: 'latitude',
  longitude: 'longitude',
  condition: 'condition',
  locationId: 'locationId'
};

exports.Prisma.LodgeScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  capacity: 'capacity',
  latitude: 'latitude',
  longitude: 'longitude',
  status: 'status',
  locationId: 'locationId'
};

exports.Prisma.HutScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  status: 'status',
  latitude: 'latitude',
  longitude: 'longitude',
  locationId: 'locationId'
};

exports.Prisma.AidRoomScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  status: 'status',
  latitude: 'latitude',
  longitude: 'longitude',
  locationId: 'locationId'
};

exports.Prisma.EquipmentServiceLogScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  equipmentId: 'equipmentId',
  employeeId: 'employeeId',
  status: 'status',
  changedAt: 'changedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  status: 'status',
  number: 'number',
  description: 'description',
  picture: 'picture',
  cost: 'cost',
  latitude: 'latitude',
  longitude: 'longitude',
  mountainId: 'mountainId',
  locationId: 'locationId',
  dateAdded: 'dateAdded'
};

exports.Prisma.IncidentScalarFieldEnum = {
  id: 'id',
  description: 'description',
  status: 'status',
  latitude: 'latitude',
  longitude: 'longitude',
  mountainId: 'mountainId',
  startTime: 'startTime',
  endTime: 'endTime',
  onSceneTime: 'onSceneTime',
  stableTime: 'stableTime',
  transportTime: 'transportTime',
  emptyRun: 'emptyRun',
  emptyRunAt: 'emptyRunAt',
  locationId: 'locationId'
};

exports.Prisma.IncidentEquipmentUsageLogScalarFieldEnum = {
  id: 'id',
  usedAt: 'usedAt',
  notes: 'notes',
  mountainId: 'mountainId',
  equipmentId: 'equipmentId',
  incidentId: 'incidentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LiftCheckScalarFieldEnum = {
  id: 'id',
  recordedAt: 'recordedAt',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  liftId: 'liftId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrailCheckScalarFieldEnum = {
  id: 'id',
  recordedAt: 'recordedAt',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  trailId: 'trailId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HutCheckScalarFieldEnum = {
  id: 'id',
  recordedAt: 'recordedAt',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  hutId: 'hutId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AidRoomCheckScalarFieldEnum = {
  id: 'id',
  recordedAt: 'recordedAt',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  aidRoomId: 'aidRoomId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentCheckScalarFieldEnum = {
  id: 'id',
  recordedAt: 'recordedAt',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  equipmentId: 'equipmentId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AREA_TYPE = exports.$Enums.AREA_TYPE = {
  BASE_AREA: 'BASE_AREA',
  MOUNTAIN_AREA: 'MOUNTAIN_AREA',
  SUMMIT: 'SUMMIT',
  OTHER: 'OTHER'
};

exports.LOCATION_TYPE = exports.$Enums.LOCATION_TYPE = {
  AIDROOM: 'AIDROOM',
  HUT: 'HUT',
  LODGE: 'LODGE',
  LIFT: 'LIFT',
  TRAIL: 'TRAIL',
  MOUNTAIN: 'MOUNTAIN',
  OTHER: 'OTHER'
};

exports.STATUS = exports.$Enums.STATUS = {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  ON_HOLD: 'ON_HOLD',
  UNKNOWN: 'UNKNOWN'
};

exports.DEPARTMENT = exports.$Enums.DEPARTMENT = {
  PATROL: 'PATROL',
  LIFT_OPERATIONS: 'LIFT_OPERATIONS',
  DISPATCH: 'DISPATCH',
  MAINTENANCE: 'MAINTENANCE',
  ADMINISTRATION: 'ADMINISTRATION',
  OTHER: 'OTHER'
};

exports.LIFT_TYPE = exports.$Enums.LIFT_TYPE = {
  CHAIR: 'CHAIR',
  GONDOLA: 'GONDOLA',
  T_BAR: 'T_BAR',
  MAGIC_CARPET: 'MAGIC_CARPET',
  ROPE_TOW: 'ROPE_TOW',
  OTHER: 'OTHER'
};

exports.TRAIL_DIFFICULTY = exports.$Enums.TRAIL_DIFFICULTY = {
  GREEN_CIRCLE: 'GREEN_CIRCLE',
  BLUE_SQUARE: 'BLUE_SQUARE',
  BLACK_DIAMOND: 'BLACK_DIAMOND',
  DOUBLE_BLACK_DIAMOND: 'DOUBLE_BLACK_DIAMOND',
  TERRAIN_PARK: 'TERRAIN_PARK',
  RACE_COURSE: 'RACE_COURSE',
  OTHER: 'OTHER'
};

exports.TRAIL_CONDITION = exports.$Enums.TRAIL_CONDITION = {
  MACHINE_GROOMED: 'MACHINE_GROOMED',
  HARD_PACK: 'HARD_PACK',
  PACKED_POWDER: 'PACKED_POWDER',
  POWDER: 'POWDER',
  MOGULS: 'MOGULS',
  NATURAL: 'NATURAL',
  GLADES: 'GLADES',
  CLOSED: 'CLOSED'
};

exports.EQUIPMENT_STATUS = exports.$Enums.EQUIPMENT_STATUS = {
  OPERATIONAL: 'OPERATIONAL',
  IN_SERVICE: 'IN_SERVICE',
  OUT_OF_SERVICE: 'OUT_OF_SERVICE',
  IN_USE: 'IN_USE',
  CLEANING: 'CLEANING',
  NEEDS_INSPECTION: 'NEEDS_INSPECTION',
  PENDING_REPAIR: 'PENDING_REPAIR',
  UNDER_MAINTENANCE: 'UNDER_MAINTENANCE',
  LOST: 'LOST',
  DAMAGED: 'DAMAGED',
  RETIRED: 'RETIRED',
  STANDBY: 'STANDBY'
};

exports.INCIDENT_STATUS = exports.$Enums.INCIDENT_STATUS = {
  STANDBY: 'STANDBY',
  REPORTED: 'REPORTED',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  UNKNOWN: 'UNKNOWN'
};

exports.Prisma.ModelName = {
  Area: 'Area',
  Location: 'Location',
  Hours: 'Hours',
  Mountain: 'Mountain',
  Weather: 'Weather',
  EmployeeMountainAssignment: 'EmployeeMountainAssignment',
  DispatcherAssignment: 'DispatcherAssignment',
  Role: 'Role',
  EmployeeRole: 'EmployeeRole',
  Employee: 'Employee',
  Lift: 'Lift',
  Trail: 'Trail',
  Lodge: 'Lodge',
  Hut: 'Hut',
  AidRoom: 'AidRoom',
  EquipmentServiceLog: 'EquipmentServiceLog',
  Equipment: 'Equipment',
  Incident: 'Incident',
  IncidentEquipmentUsageLog: 'IncidentEquipmentUsageLog',
  LiftCheck: 'LiftCheck',
  TrailCheck: 'TrailCheck',
  HutCheck: 'HutCheck',
  AidRoomCheck: 'AidRoomCheck',
  EquipmentCheck: 'EquipmentCheck'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
