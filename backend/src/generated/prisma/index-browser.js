
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AreaScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  type: 'type',
  description: 'description'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  areaId: 'areaId',
  entityId: 'entityId',
  entityType: 'entityType'
};

exports.Prisma.HoursScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  dayOfWeek: 'dayOfWeek',
  date: 'date',
  openTime: 'openTime',
  closeTime: 'closeTime',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MountainScalarFieldEnum = {
  id: 'id',
  name: 'name',
  latitude: 'latitude',
  longitude: 'longitude',
  height: 'height',
  phoneNumber: 'phoneNumber',
  address: 'address',
  city: 'city',
  state: 'state',
  zipcode: 'zipcode',
  openingDate: 'openingDate',
  closingDate: 'closingDate'
};

exports.Prisma.WeatherScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  date: 'date',
  temperature: 'temperature',
  windSpeed: 'windSpeed',
  windDirection: 'windDirection',
  visibility: 'visibility',
  conditions: 'conditions',
  snowfallRecent: 'snowfallRecent',
  snowfall24h: 'snowfall24h',
  snowfall7d: 'snowfall7d',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeMountainAssignmentScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  assignedAt: 'assignedAt'
};

exports.Prisma.DispatcherAssignmentScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  assignedAt: 'assignedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  permissions: 'permissions',
  employeeId: 'employeeId'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  employeeIdNumber: 'employeeIdNumber',
  email: 'email',
  phoneNumber: 'phoneNumber',
  name: 'name',
  title: 'title',
  roleId: 'roleId',
  department: 'department'
};

exports.Prisma.LiftScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  type: 'type',
  status: 'status',
  capacity: 'capacity',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.TrailScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  difficulty: 'difficulty',
  status: 'status',
  length: 'length',
  latitude: 'latitude',
  longitude: 'longitude',
  condition: 'condition'
};

exports.Prisma.LodgeScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  capacity: 'capacity',
  latitude: 'latitude',
  longitude: 'longitude',
  status: 'status'
};

exports.Prisma.HutScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  status: 'status',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.AidRoomScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  name: 'name',
  status: 'status',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.EquipmentServiceLogScalarFieldEnum = {
  id: 'id',
  mountainId: 'mountainId',
  equipmentId: 'equipmentId',
  employeeId: 'employeeId',
  status: 'status',
  changedAt: 'changedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  number: 'number',
  description: 'description',
  status: 'status',
  picture: 'picture',
  cost: 'cost',
  latitude: 'latitude',
  longitude: 'longitude',
  mountainId: 'mountainId',
  locationId: 'locationId',
  dateAdded: 'dateAdded'
};

exports.Prisma.IncidentScalarFieldEnum = {
  id: 'id',
  description: 'description',
  status: 'status',
  latitude: 'latitude',
  longitude: 'longitude',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  startTime: 'startTime',
  endTime: 'endTime',
  onSceneTime: 'onSceneTime',
  stableTime: 'stableTime',
  transportTime: 'transportTime',
  emptyRun: 'emptyRun',
  emptyRunAt: 'emptyRunAt',
  locationId: 'locationId'
};

exports.Prisma.IncidentEquipmentUseageLogScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  mountainId: 'mountainId',
  usedAt: 'usedAt',
  notes: 'notes',
  incidentId: 'incidentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LiftCheckScalarFieldEnum = {
  id: 'id',
  recordedAt: 'recordedAt',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  liftId: 'liftId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrailCheckScalarFieldEnum = {
  id: 'id',
  recordedAt: 'recordedAt',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  trailId: 'trailId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HutCheckScalarFieldEnum = {
  id: 'id',
  recordedAt: 'recordedAt',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  hutId: 'hutId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AidRoomCheckScalarFieldEnum = {
  id: 'id',
  recordedAt: 'recordedAt',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  aidRoomId: 'aidRoomId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentCheckScalarFieldEnum = {
  id: 'id',
  recordedAt: 'recordedAt',
  employeeId: 'employeeId',
  mountainId: 'mountainId',
  equipmentId: 'equipmentId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AreaType = exports.$Enums.AreaType = {
  BaseArea: 'BaseArea',
  MountainArea: 'MountainArea',
  Summit: 'Summit',
  Other: 'Other'
};

exports.LocationType = exports.$Enums.LocationType = {
  AidRoom: 'AidRoom',
  Hut: 'Hut',
  Lodge: 'Lodge',
  Lift: 'Lift',
  Trail: 'Trail',
  Mountain: 'Mountain',
  Other: 'Other'
};

exports.Status = exports.$Enums.Status = {
  Open: 'Open',
  Closed: 'Closed',
  OnHold: 'OnHold',
  Unknown: 'Unknown'
};

exports.Department = exports.$Enums.Department = {
  Patrol: 'Patrol',
  LiftOperations: 'LiftOperations',
  Dispatch: 'Dispatch',
  Maintenance: 'Maintenance',
  Administration: 'Administration',
  Other: 'Other'
};

exports.LiftType = exports.$Enums.LiftType = {
  Chair: 'Chair',
  Gondola: 'Gondola',
  Surface: 'Surface',
  Rope: 'Rope',
  Conveyor: 'Conveyor',
  Other: 'Other'
};

exports.TrailDifficulty = exports.$Enums.TrailDifficulty = {
  GreenCircle: 'GreenCircle',
  BlueSquare: 'BlueSquare',
  BlackDiamond: 'BlackDiamond',
  DoubleBlackDiamond: 'DoubleBlackDiamond',
  TerrainPark: 'TerrainPark',
  RaceCourse: 'RaceCourse'
};

exports.TrailCondition = exports.$Enums.TrailCondition = {
  MachineGroomed: 'MachineGroomed',
  HardPack: 'HardPack',
  PackedPowder: 'PackedPowder',
  Powder: 'Powder',
  Moguls: 'Moguls',
  Natural: 'Natural',
  Glades: 'Glades',
  Closed: 'Closed'
};

exports.EquipmentStatus = exports.$Enums.EquipmentStatus = {
  Operational: 'Operational',
  InService: 'InService',
  OutOfService: 'OutOfService',
  InUse: 'InUse',
  Cleaning: 'Cleaning',
  NeedsInspection: 'NeedsInspection',
  PendingRepair: 'PendingRepair',
  UnderMaintenance: 'UnderMaintenance',
  Lost: 'Lost',
  Damaged: 'Damaged',
  Retired: 'Retired',
  Standby: 'Standby'
};

exports.IncidentStatus = exports.$Enums.IncidentStatus = {
  Standby: 'Standby',
  Reported: 'Reported',
  InProgress: 'InProgress',
  Resolved: 'Resolved',
  Unknown: 'Unknown'
};

exports.Prisma.ModelName = {
  Area: 'Area',
  Location: 'Location',
  Hours: 'Hours',
  Mountain: 'Mountain',
  Weather: 'Weather',
  EmployeeMountainAssignment: 'EmployeeMountainAssignment',
  DispatcherAssignment: 'DispatcherAssignment',
  Role: 'Role',
  Employee: 'Employee',
  Lift: 'Lift',
  Trail: 'Trail',
  Lodge: 'Lodge',
  Hut: 'Hut',
  AidRoom: 'AidRoom',
  EquipmentServiceLog: 'EquipmentServiceLog',
  Equipment: 'Equipment',
  Incident: 'Incident',
  IncidentEquipmentUseageLog: 'IncidentEquipmentUseageLog',
  LiftCheck: 'LiftCheck',
  TrailCheck: 'TrailCheck',
  HutCheck: 'HutCheck',
  AidRoomCheck: 'AidRoomCheck',
  EquipmentCheck: 'EquipmentCheck'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
