generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LocationType {
  AidRoom  @map("Aid Room")
  Hut
  Lodge
  Lift
  Trail
  Mountain
  Other
}

enum Status {
  Open
  Closed
  OnHold  @map("On Hold")
  Unknown
}

enum IncidentStatus {
  Standby
  Reported
  InProgress @map("In Progress")
  Resolved
  Unknown
}

enum EquipmentStatus {
  Operational
  InService        @map("In Service")
  OutOfService     @map("Out Of Service")
  InUse            @map("In Use")
  Cleaning
  NeedsInspection  @map("Needs Inspection")
  PendingRepair    @map("Pending Repair")
  UnderMaintenance @map("Under Maintenance")
  Lost
  Damaged
  Retired
  Standby
}

enum LiftType {
  Chair
  Gondola
  Surface
  Rope
  Conveyor
  Other
}

enum TrailCondition {
  MachineGroomed @map("Machine Groomed")
  HardPack       @map("Hard Pack")
  PackedPowder   @map("Packed Powder")
  Powder
  Moguls
  Natural
  Glades
  Closed
}

enum TrailDifficulty {
  GreenCircle        @map("Green Circle")
  BlueSquare         @map("Blue Square")
  BlackDiamond       @map("Black Diamond")
  DoubleBlackDiamond @map("Double Black Diamond")
  TerrainPark        @map("Terrain Park")
  RaceCourse         @map("Race Course")
}

enum Department {
  Patrol
  LiftOperations @map("Lift Operations")
  Dispatch
  Maintenance
  Administration
  Other
}

model Location {
  id         String       @id @default(uuid())
  mountainId String
  type       LocationType
  name       String

  aidRoomId String?
  hutId     String?
  lodgeId   String?
  liftId    String?
  trailId   String?

  aidRoom  AidRoom? @relation("AidRoomLocation", fields: [aidRoomId], references: [id])
  hut      Hut?     @relation("HutLocation", fields: [hutId], references: [id])
  lodge    Lodge?   @relation("LodgeLocation", fields: [lodgeId], references: [id])
  lift     Lift?    @relation("LiftLocation", fields: [liftId], references: [id])
  trail    Trail?   @relation("TrailLocation", fields: [trailId], references: [id])
  mountain Mountain @relation("MountainLocation", fields: [mountainId], references: [id])

  hours     Hours[]
  equipment Equipment[]
  incidents Incident[]

  @@index([type])
  @@index([mountainId, type])
}

model Hours {
  id         String    @id @default(uuid())
  locationId String
  location   Location  @relation(fields: [locationId], references: [id])
  dayOfWeek  Int? // Day of the week (1 = Monday, 7 = Sunday, null for specific dates)
  date       DateTime? // Specific date for holidays or exceptions (null for regular days)
  openTime   DateTime?
  closeTime  DateTime?
  status     Status    @default(Open)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([locationId, dayOfWeek, date])
}

model Mountain {
  id          String     @id @default(uuid())
  name        String     @unique
  latitude    Decimal?
  longitude   Decimal?
  height      Int
  phoneNumber String
  address     String
  city        String
  state       String
  zipcode     String
  openingDate DateTime?
  closingDate DateTime?
  weather     Weather[]
  locations   Location[] @relation("MountainLocation")

  aidRooms      AidRoom[]
  aidRoomChecks AidRoomCheck[]
  huts          Hut[]
  hutChecks     HutCheck[]
  lodges        Lodge[]
  lifts         Lift[]
  liftChecks    LiftCheck[]
  trails        Trail[]

  trailChecks     TrailCheck[]
  equipmentChecks EquipmentCheck[]
  incidents       Incident[]
  equipment       Equipment[]

  employeeAssignments   EmployeeMountainAssignment[]
  dispatcherAssignments DispatcherAssignment[]
  incidentEquipmentLog  IncidentEquipmentLog[]
  equipmentServiceLogs  EquipmentServiceLog[]
}

model Weather {
  id         String   @id @default(uuid())
  mountainId String
  mountain   Mountain @relation(fields: [mountainId], references: [id])
  date       DateTime @default(now())

  temperature    Float
  windSpeed      Float
  windDirection  String?
  visibility     Float?
  conditions     String
  snowfallRecent Float?
  snowfall24h    Float?
  snowfall7d     Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmployeeMountainAssignment {
  id         String   @id @default(uuid())
  employeeId String
  mountainId String
  assignedAt DateTime @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])
  mountain Mountain @relation(fields: [mountainId], references: [id])

  @@index([mountainId])
  @@index([employeeId])
}

model DispatcherAssignment {
  id         String   @id @default(uuid())
  employeeId String
  mountainId String
  assignedAt DateTime @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])
  mountain Mountain @relation(fields: [mountainId], references: [id])

  @@index([employeeId])
  @@index([mountainId])
}

model Employee {
  id               String     @id @default(uuid())
  employeeIdNumber String     @unique
  email            String     @unique
  phoneNumber      String
  name             String
  title            String
  role             String
  department       Department

  mountainAssignments   EmployeeMountainAssignment[]
  dispatcherAssignments DispatcherAssignment[]

  incidents            Incident[]
  aidRoomChecks        AidRoomCheck[]
  hutChecks            HutCheck[]
  liftChecks           LiftCheck[]
  trailChecks          TrailCheck[]
  equipmentChecks      EquipmentCheck[]
  equipmentServiceLogs EquipmentServiceLog[]
}

model Lift {
  id         String   @id @default(uuid())
  mountainId String
  name       String
  type       LiftType
  status     Status   @default(Unknown)
  capacity   Int
  latitude   Decimal?
  longitude  Decimal?

  locations  Location[]  @relation("LiftLocation")
  mountain   Mountain    @relation(fields: [mountainId], references: [id])
  liftChecks LiftCheck[]

  @@unique([name, type])
  @@index([mountainId])
}

model Trail {
  id         String          @id @default(uuid())
  mountainId String
  name       String          @unique
  difficulty TrailDifficulty
  status     Status          @default(Unknown)
  length     Float
  latitude   Decimal?
  longitude  Decimal?

  condition   TrailCondition @default(Closed)
  locations   Location[]     @relation("TrailLocation")
  mountain    Mountain       @relation(fields: [mountainId], references: [id])
  trailChecks TrailCheck[]

  @@unique([mountainId, name])
  @@index([mountainId])
}

model Lodge {
  id         String   @id @default(uuid())
  mountainId String
  name       String   @unique
  capacity   Int
  latitude   Decimal?
  longitude  Decimal?

  status    Status     @default(Unknown)
  locations Location[] @relation("LodgeLocation")
  mountain  Mountain   @relation(fields: [mountainId], references: [id])

  @@unique([mountainId, name])
  @@index([mountainId])
}

model Hut {
  id         String   @id @default(uuid())
  mountainId String
  name       String   @unique
  status     Status   @default(Unknown)
  latitude   Decimal?
  longitude  Decimal?

  locations Location[] @relation("HutLocation")
  mountain  Mountain   @relation(fields: [mountainId], references: [id])
  hutChecks HutCheck[]

  @@unique([mountainId, name])
  @@index([mountainId])
}

model AidRoom {
  id         String   @id @default(uuid())
  mountainId String
  name       String   @unique
  status     Status   @default(Unknown)
  latitude   Decimal?
  longitude  Decimal?

  locations     Location[]     @relation("AidRoomLocation")
  mountain      Mountain       @relation(fields: [mountainId], references: [id])
  aidRoomChecks AidRoomCheck[]

  @@unique([mountainId, name])
  @@index([mountainId])
}

model EquipmentServiceLog {
  id          String  @id @default(uuid())
  mountainId  String
  equipmentId String
  employeeId  String?

  status    EquipmentStatus @default(Operational)
  changedAt DateTime        @default(now())
  notes     String?

  mountain  Mountain  @relation(fields: [mountainId], references: [id])
  employee  Employee? @relation(fields: [employeeId], references: [id])
  equipment Equipment @relation(fields: [equipmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mountainId, equipmentId])
}

model Equipment {
  id          String          @id @default(uuid())
  name        String
  type        String
  description String?
  status      EquipmentStatus @default(Operational)
  picture     String?
  cost        Float?
  latitude    Decimal?
  longitude   Decimal?
  mountainId  String
  mountain    Mountain        @relation(fields: [mountainId], references: [id])

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  dateAdded       DateTime               @default(now())
  usedInLogs      IncidentEquipmentLog[]
  equipmentChecks EquipmentCheck[]
  serviceLogs     EquipmentServiceLog[]

  @@index([mountainId, locationId])
}

model Incident {
  id            String                 @id @default(uuid())
  description   String
  status        IncidentStatus         @default(Reported)
  latitude      Decimal?
  longitude     Decimal?
  employeeId    String?
  employee      Employee?              @relation(fields: [employeeId], references: [id])
  mountainId    String
  mountain      Mountain               @relation(fields: [mountainId], references: [id])
  startTime     DateTime               @default(now())
  endTime       DateTime?
  onSceneTime   DateTime?
  stableTime    DateTime?
  transportTime DateTime?
  emptyRun      Boolean                @default(false)
  emptyRunAt    DateTime?
  equipmentUsed IncidentEquipmentLog[]

  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  @@index([mountainId, locationId])
  @@index([mountainId, employeeId])
  @@index([mountainId, id, startTime])
}

model IncidentEquipmentLog {
  id          String    @id @default(uuid())
  equipmentId String
  mountainId  String
  mountain    Mountain  @relation(fields: [mountainId], references: [id])
  usedAt      DateTime  @default(now())
  notes       String?
  incidentId  String
  incident    Incident  @relation(fields: [incidentId], references: [id])
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mountainId, incidentId])
  @@index([mountainId, equipmentId])
  @@index([mountainId, usedAt])
}

model LiftCheck {
  id         String   @id @default(uuid())
  recordedAt DateTime @default(now())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  mountainId String
  mountain   Mountain @relation(fields: [mountainId], references: [id])
  liftId     String
  lift       Lift     @relation(fields: [liftId], references: [id])
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([liftId])
  @@index([mountainId, recordedAt, employeeId])
}

model TrailCheck {
  id         String   @id @default(uuid())
  recordedAt DateTime @default(now())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  mountainId String
  mountain   Mountain @relation(fields: [mountainId], references: [id])
  trailId    String
  trail      Trail    @relation(fields: [trailId], references: [id])
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([trailId])
  @@index([mountainId, recordedAt, employeeId])
}

model HutCheck {
  id         String   @id @default(uuid())
  recordedAt DateTime @default(now())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  mountainId String
  mountain   Mountain @relation(fields: [mountainId], references: [id])
  hutId      String
  hut        Hut      @relation(fields: [hutId], references: [id])
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hutId])
  @@index([mountainId, recordedAt, employeeId])
}

model AidRoomCheck {
  id         String   @id @default(uuid())
  recordedAt DateTime @default(now())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  mountainId String
  mountain   Mountain @relation(fields: [mountainId], references: [id])
  aidRoomId  String
  aidRoom    AidRoom  @relation(fields: [aidRoomId], references: [id])
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([aidRoomId])
  @@index([mountainId, recordedAt, employeeId])
}

model EquipmentCheck {
  id          String    @id @default(uuid())
  recordedAt  DateTime  @default(now())
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  mountainId  String
  mountain    Mountain  @relation(fields: [mountainId], references: [id])
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([equipmentId])
  @@index([mountainId, recordedAt, employeeId])
}
