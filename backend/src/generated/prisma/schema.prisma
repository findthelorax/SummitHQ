generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LocationType {
  AidRoom  @map("Aid Room")
  Hut
  Lodge
  Lift
  Trail
  Mountain
  Other
}

enum Status {
  Open
  Closed
  OnHold  @map("On Hold")
  Unknown
}

enum IncidentStatus {
  Standby
  Reported
  InProgress @map("In Progress")
  Resolved
  Unknown
}

enum EquipmentStatus {
  Operational
  InService        @map("In Service")
  OutOfService     @map("Out Of Service")
  InUse            @map("In Use")
  Cleaning
  NeedsInspection  @map("Needs Inspection")
  PendingRepair    @map("Pending Repair")
  UnderMaintenance @map("Under Maintenance")
  Lost
  Damaged
  Retired
  Standby
}

enum LiftType {
  Chair
  Gondola
  Surface
  Rope
  Conveyor
  Other
}

enum TrailCondition {
  MachineGroomed @map("Machine Groomed")
  HardPack       @map("Hard Pack")
  PackedPowder   @map("Packed Powder")
  Powder
  Moguls
  Natural
  Glades
  Closed
}

enum TrailDifficulty {
  GreenCircle        @map("Green Circle")
  BlueSquare         @map("Blue Square")
  BlackDiamond       @map("Black Diamond")
  DoubleBlackDiamond @map("Double Black Diamond")
  TerrainPark        @map("Terrain Park")
  RaceCourse         @map("Race Course")
}

enum Department {
  Patrol
  LiftOperations @map("Lift Operations")
  Dispatch
  Maintenance
  Administration
  Other
}

enum AreaType {
  BaseArea
  MountainArea
  Summit
  Other
}

model Area {
  id          String   @id @default(uuid())
  mountainID  String
  name        String
  type        AreaType
  description String?

  mountain Mountain @relation(fields: [mountainID], references: [id], onDelete: Cascade)

  locations Location[] @relation("AreaLocation")

  @@index([mountainID])
}

model Location {
  id         String @id @default(uuid())
  mountainID String
  name       String

  areaID String?
  area   Area?   @relation("AreaLocation", fields: [areaID], references: [id])

  entityID   String?
  entityType LocationType

  mountain Mountain @relation("MountainLocation", fields: [mountainID], references: [id], onDelete: Cascade)

  hours     Hours[]
  equipment Equipment[]
  incidents Incident[]

  @@index([entityType])
  @@index([mountainID, entityType])
  @@index([areaID])
  @@index([mountainID, areaID, entityType])
}

model Hours {
  id         String   @id @default(uuid())
  locationID String
  location   Location @relation(fields: [locationID], references: [id], onDelete: Cascade)

  dayOfWeek Int? // Day of the week (1 = Monday, 7 = Sunday, null for specific dates)
  date      DateTime? // Specific date for holidays or exceptions (null for regular days)
  openTime  DateTime?
  closeTime DateTime?
  status    Status    @default(Open)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([locationID, dayOfWeek, date])
}

model Mountain {
  id          String     @id @default(uuid())
  name        String     @unique
  latitude    Decimal?
  longitude   Decimal?
  height      Int
  phoneNumber String
  address     String
  city        String
  state       String
  zipcode     String
  openingDate DateTime?
  closingDate DateTime?
  weather     Weather[]
  locations   Location[] @relation("MountainLocation")

  areas         Area[]
  aidRooms      AidRoom[]
  aidRoomChecks AidRoomCheck[]
  huts          Hut[]
  hutChecks     HutCheck[]
  lodges        Lodge[]
  lifts         Lift[]
  liftChecks    LiftCheck[]
  trails        Trail[]

  trailChecks     TrailCheck[]
  equipmentChecks EquipmentCheck[]
  incidents       Incident[]
  equipment       Equipment[]

  employeeAssignments       EmployeeMountainAssignment[]
  dispatcherAssignments     DispatcherAssignment[]
  incidentEquipmentUsageLog IncidentEquipmentUseageLog[]
  equipmentServiceLogs      EquipmentServiceLog[]
}

model Weather {
  id         String   @id @default(uuid())
  mountainID String
  mountain   Mountain @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  date       DateTime @default(now())

  temperature    Float
  windSpeed      Float
  windDirection  String?
  visibility     Float?
  conditions     String
  snowfallRecent Float?
  snowfall24h    Float?
  snowfall7d     Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmployeeMountainAssignment {
  id         String   @id @default(uuid())
  employeeID String
  mountainID String
  assignedAt DateTime @default(now())

  employee Employee @relation(fields: [employeeID], references: [id])
  mountain Mountain @relation(fields: [mountainID], references: [id], onDelete: Cascade)

  @@index([mountainID])
  @@index([employeeID])
}

model DispatcherAssignment {
  id         String   @id @default(uuid())
  employeeID String
  mountainID String
  assignedAt DateTime @default(now())

  employee Employee @relation(fields: [employeeID], references: [id])
  mountain Mountain @relation(fields: [mountainID], references: [id], onDelete: Cascade)

  @@index([employeeID])
  @@index([mountainID])
}

enum EmployeeRoles {
  Supervisor
  AdvancedPatroller
  HillChief
  Specialist
  Trainer
  Director
}

model Role {
  id          String     @id @default(uuid())
  department  Department
  name        String
  title       String
  position    String
  level       Int?
  permissions String[] // Array of permissions (e.g., ["CREATE_INCIDENT", "ASSIGN_EQUIPMENT"])

  employees    Employee[]
  employeeRole EmployeeRole[]

  @@unique([department, name])
}

model EmployeeRole {
  id         String @id @default(uuid())
  employeeID String
  roleID     String

  employee Employee @relation(fields: [employeeID], references: [id], onDelete: Cascade)
  role     Role     @relation(fields: [roleID], references: [id], onDelete: Cascade)

  @@unique([employeeID, roleID])
}

model Employee {
  id               String  @id @default(uuid())
  employeeIDNumber Int     @unique
  email            String  @unique
  phoneNumber      String
  name             String
  roleID           String?
  role             Role?   @relation(fields: [roleID], references: [id])

  additionalRoles EmployeeRole[]

  mountainAssignments   EmployeeMountainAssignment[]
  dispatcherAssignments DispatcherAssignment[]

  incidents            Incident[]
  aidRoomChecks        AidRoomCheck[]
  hutChecks            HutCheck[]
  liftChecks           LiftCheck[]
  trailChecks          TrailCheck[]
  equipmentChecks      EquipmentCheck[]
  equipmentServiceLogs EquipmentServiceLog[]
}

model Lift {
  id         String   @id @default(uuid())
  mountainID String
  name       String
  type       LiftType
  status     Status   @default(Unknown)
  capacity   Int
  latitude   Decimal?
  longitude  Decimal?

  mountain   Mountain    @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  liftChecks LiftCheck[]

  @@unique([name, type])
  @@unique([mountainID, name])
  @@index([mountainID])
}

model Trail {
  id         String          @id @default(uuid())
  mountainID String
  name       String
  difficulty TrailDifficulty
  status     Status          @default(Unknown)
  length     Float
  latitude   Decimal?
  longitude  Decimal?
  condition  TrailCondition  @default(Closed)

  mountain    Mountain     @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  trailChecks TrailCheck[]

  @@unique([mountainID, name])
  @@index([mountainID])
}

model Lodge {
  id         String   @id @default(uuid())
  mountainID String
  name       String
  capacity   Int
  latitude   Decimal?
  longitude  Decimal?
  status     Status   @default(Unknown)

  mountain Mountain @relation(fields: [mountainID], references: [id], onDelete: Cascade)

  @@unique([mountainID, name])
  @@index([mountainID])
}

model Hut {
  id         String   @id @default(uuid())
  mountainID String
  name       String
  status     Status   @default(Unknown)
  latitude   Decimal?
  longitude  Decimal?

  mountain  Mountain   @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  hutChecks HutCheck[]

  @@unique([mountainID, name])
  @@index([mountainID])
}

model AidRoom {
  id         String   @id @default(uuid())
  mountainID String
  name       String
  status     Status   @default(Unknown)
  latitude   Decimal?
  longitude  Decimal?

  mountain      Mountain       @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  aidRoomChecks AidRoomCheck[]

  @@unique([mountainID, name])
  @@index([mountainID])
}

model EquipmentServiceLog {
  id          String  @id @default(uuid())
  mountainID  String
  equipmentID String
  employeeID  String?

  status    EquipmentStatus @default(Operational)
  changedAt DateTime        @default(now())
  notes     String?

  mountain  Mountain  @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  employee  Employee? @relation(fields: [employeeID], references: [id])
  equipment Equipment @relation(fields: [equipmentID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mountainID, equipmentID])
}

model Equipment {
  id          String          @id @default(uuid())
  name        String
  type        String
  number      Int?
  description String?
  status      EquipmentStatus @default(Operational)
  picture     String?
  cost        Float?
  latitude    Decimal?
  longitude   Decimal?
  mountainID  String
  mountain    Mountain        @relation(fields: [mountainID], references: [id])

  locationID String?
  location   Location? @relation(fields: [locationID], references: [id])

  dateAdded                  DateTime                     @default(now())
  incidentEquipmentUsageLogs IncidentEquipmentUseageLog[]
  equipmentChecks            EquipmentCheck[]
  equipmentServiceLogs       EquipmentServiceLog[]

  @@unique([mountainID, number])
  @@index([mountainID, locationID])
}

model Incident {
  id                        String                       @id @default(uuid())
  description               String
  status                    IncidentStatus               @default(Reported)
  latitude                  Decimal?
  longitude                 Decimal?
  employeeID                String?
  employee                  Employee?                    @relation(fields: [employeeID], references: [id])
  mountainID                String
  mountain                  Mountain                     @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  startTime                 DateTime                     @default(now())
  endTime                   DateTime?
  onSceneTime               DateTime?
  stableTime                DateTime?
  transportTime             DateTime?
  emptyRun                  Boolean                      @default(false)
  emptyRunAt                DateTime?
  incidentEquipmentUsageLog IncidentEquipmentUseageLog[]

  locationID String
  location   Location @relation(fields: [locationID], references: [id])

  @@index([mountainID, locationID])
  @@index([mountainID, employeeID])
  @@index([mountainID, id, startTime])
  @@index([mountainID, startTime])
  @@index([locationID, startTime])
}

model IncidentEquipmentUseageLog {
  id          String    @id @default(uuid())
  equipmentID String
  mountainID  String
  mountain    Mountain  @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  usedAt      DateTime  @default(now())
  notes       String?
  incidentID  String
  incident    Incident  @relation(fields: [incidentID], references: [id], onDelete: Cascade)
  equipment   Equipment @relation(fields: [equipmentID], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mountainID, incidentID])
  @@index([mountainID, equipmentID])
  @@index([mountainID, usedAt])
}

model LiftCheck {
  id         String   @id @default(uuid())
  recordedAt DateTime @default(now())
  employeeID String
  employee   Employee @relation(fields: [employeeID], references: [id])
  mountainID String
  mountain   Mountain @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  liftID     String
  lift       Lift     @relation(fields: [liftID], references: [id], onDelete: Cascade)
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([liftID])
  @@index([mountainID, recordedAt, employeeID])
  @@index([mountainID, createdAt])
  @@index([liftID, createdAt])
}

model TrailCheck {
  id         String   @id @default(uuid())
  recordedAt DateTime @default(now())
  employeeID String
  employee   Employee @relation(fields: [employeeID], references: [id])
  mountainID String
  mountain   Mountain @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  trailID    String
  trail      Trail    @relation(fields: [trailID], references: [id], onDelete: Cascade)
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([trailID])
  @@index([mountainID, recordedAt, employeeID])
  @@index([mountainID, createdAt])
  @@index([trailID, createdAt])
}

model HutCheck {
  id         String   @id @default(uuid())
  recordedAt DateTime @default(now())
  employeeID String
  employee   Employee @relation(fields: [employeeID], references: [id])
  mountainID String
  mountain   Mountain @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  hutID      String
  hut        Hut      @relation(fields: [hutID], references: [id], onDelete: Cascade)
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hutID])
  @@index([mountainID, recordedAt, employeeID])
  @@index([mountainID, createdAt])
  @@index([hutID, createdAt])
}

model AidRoomCheck {
  id         String   @id @default(uuid())
  recordedAt DateTime @default(now())
  employeeID String
  employee   Employee @relation(fields: [employeeID], references: [id])
  mountainID String
  mountain   Mountain @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  aidRoomID  String
  aidRoom    AidRoom  @relation(fields: [aidRoomID], references: [id], onDelete: Cascade)
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([aidRoomID])
  @@index([mountainID, recordedAt, employeeID])
  @@index([mountainID, createdAt])
  @@index([aidRoomID, createdAt])
}

model EquipmentCheck {
  id          String    @id @default(uuid())
  recordedAt  DateTime  @default(now())
  employeeID  String
  employee    Employee  @relation(fields: [employeeID], references: [id])
  mountainID  String
  mountain    Mountain  @relation(fields: [mountainID], references: [id], onDelete: Cascade)
  equipmentID String
  equipment   Equipment @relation(fields: [equipmentID], references: [id], onDelete: Cascade)
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([equipmentID])
  @@index([mountainID, recordedAt, employeeID])
  @@index([mountainID, createdAt])
  @@index([equipmentID, createdAt])
}
