generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mountain {
  id                String   @id @default(uuid())
  name              String   @unique
  latitude          Float?
  longitude         Float?
  height            Int
  hours             String
  phoneNumber       String
  address           String
  city              String
  state             String
  zipcode           String
  openingDate       DateTime?
  closingDate       DateTime?
  lifts             Lift[]
  liftChecks        LiftCheck[]
  trails            Trail[]
  trailChecks       TrailCheck[]
  employees         Employee[]
  lodges            Lodge[]
  huts              Hut[]
  hutChecks         HutCheck[]
  aidRooms          AidRoom[]
  aidRoomChecks     AidRoomCheck[]
  equipment         Equipment[]
  equipmentChecks   EquipmentCheck[]
  incidents         Incident[]
  incidentLogs      IncidentLog[]
  dispatcherAssignments   DispatcherAssignment[]
  incidentLogEquipment    IncidentLogEquipment[]
  weather           Weather[]
}

model Weather {
  id            String    @id @default(uuid())
  mountainId    String
  mountain      Mountain  @relation(fields: [mountainId], references: [id])
  date          DateTime  @default(now())

  temperature   Float
  windSpeed     Float
  windDirection String?
  visibility    Float?
  conditions    String
  snowfall24h   Float?
  snowfall7d    Float?
  updatedAt     DateTime  @updatedAt
}

enum Status {
  OPEN
  CLOSED
  UNKNOWN
}

enum Department {
  PATROL
  LIFT_OPERATIONS @map("LIFT OPS")
  DISPATCH
  MAINTENANCE
  ADMINISTRATION
  OTHER
}

model Employee {
  id                    String     @id @default(uuid())
  employeeIdNumber      String     @unique
  email                 String     @unique
  phoneNumber           String
  name                  String
  title                 String
  role                  String
  department            Department
  mountainId            String
  mountain              Mountain   @relation(fields: [mountainId], references: [id])
  dispatcherAssignments DispatcherAssignment[]
  logs                  IncidentLog[]
  liftChecks            LiftCheck[]
  trailChecks           TrailCheck[]
  hutChecks             HutCheck[]
  aidRoomChecks         AidRoomCheck[]
  equipmentChecks       EquipmentCheck[]

  @@index([mountainId])
}

model DispatcherAssignment {
  id           String     @id @default(uuid())
  employee     Employee   @relation(fields: [employeeId], references: [id])
  employeeId   String
  assignedAt   DateTime   @default(now())
  mountain     Mountain   @relation(fields: [mountainId], references: [id])
  mountainId   String

  @@index([employeeId])
  @@index([mountainId])
}

model Lift {
  id          String   @id @default(uuid())
  name        String
  capacity    Int
  status      Status   @default(UNKNOWN)
  latitude    Float?
  longitude   Float?
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])
  incidentLogs IncidentLog[] @relation("LiftIncidentLog")
  equipment   Equipment[] @relation("LiftEquipment")
  liftChecks  LiftCheck[]

  @@index([mountainId])
}

enum TrailCondition {
  MACHINE_GROOMED      @map("MACHINE GROOMED")
  PACKED_POWDER        @map("PACKED POWDER")
  POWDER
  HARD_PACK            @map("HARD PACK")
  GROOMED
  MOGULS
  CLOSED
}

enum TrailDifficulty {
  GREEN_CIRCLE
  BLUE_SQUARE
  BLACK_DIAMOND
  DOUBLE_BLACK_DIAMOND
  TERRAIN_PARK
  RACE_COURSE
}

model Trail {
  id          String   @id @default(uuid())
  name        String
  status      Status   @default(UNKNOWN)
  difficulty  TrailDifficulty
  length      Float
  condition   TrailCondition   @default(CLOSED)
  latitude    Float?
  longitude   Float?
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])
  incidentLogs IncidentLog[] @relation("TrailIncidentLog")
  equipment   Equipment[] @relation("TrailEquipment")
  trailChecks TrailCheck[]

  @@index([mountainId])
}

model Lodge {
  id          String   @id @default(uuid())
  latitude    Float?
  longitude   Float?
  name        String
  capacity    Int
  hours       String
  status      Status   @default(UNKNOWN)
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])
  incidentLogs IncidentLog[] @relation("LodgeIncidentLog")
  equipment   Equipment[] @relation("LodgeEquipment")

  @@index([mountainId])
}

model Hut {
  id          String   @id @default(uuid())
  name        String
  status      Status   @default(UNKNOWN)
  latitude    Float?
  longitude   Float?
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])
  incidentLogs IncidentLog[] @relation("HutIncidentLog")
  equipment   Equipment[] @relation("HutEquipment")
  hutChecks   HutCheck[]

  @@index([mountainId])
}

model AidRoom {
  id          String   @id @default(uuid())
  name        String
  location    String
  status      Status   @default(UNKNOWN)
  latitude    Float?
  longitude   Float?
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])
  incidentLogs IncidentLog[] @relation("AidRoomIncidentLog")
  equipment   Equipment[] @relation("AidRoomEquipment")
  aidRoomChecks AidRoomCheck[]

  @@index([mountainId])
}

enum EquipmentService {
  IN_SERVICE
  OUT_OF_SERVICE
  NEEDS_INSPECTION
  PENDING_REPAIR
  UNDER_MAINTENANCE
  CLEANING
}

enum EquipmentStatus {
  AVAILABLE
  STANDBY
  IN_USE
  RETIRED
  LOST
}

model EquipmentServiceLog {
  id             String   @id @default(uuid())
  equipmentId    String
  equipment      Equipment @relation(fields: [equipmentId], references: [id])
  serviceStatus  EquipmentService
  changedAt      DateTime @default(now())
  notes          String?

  @@index([equipmentId])
}

model Equipment {
  id          String   @id @default(uuid())
  name        String
  type        String
  description String?
  status      EquipmentStatus
  service     EquipmentService
  picture     String?
  cost        Float?
  latitude    Float?
  longitude   Float?
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])

  locationType LocationType?
  locationId   String?

  lift         Lift?        @relation("LiftEquipment", fields: [locationId], references: [id], map: "LiftEquipment_fk")
  trail        Trail?       @relation("TrailEquipment", fields: [locationId], references: [id], map: "TrailEquipment_fk")
  lodge        Lodge?       @relation("LodgeEquipment", fields: [locationId], references: [id], map: "LodgeEquipment_fk")
  hut          Hut?         @relation("HutEquipment", fields: [locationId], references: [id], map: "HutEquipment_fk")
  aidRoom      AidRoom?     @relation("AidRoomEquipment", fields: [locationId], references: [id], map: "AidRoomEquipment_fk")

  dateAdded    DateTime @default(now())
  usedInLogs   IncidentLogEquipment[]
  equipmentChecks EquipmentCheck[]
  serviceLogs  EquipmentServiceLog[]

  @@index([mountainId])
  @@index([locationId, locationType])
}

model Incident {
  id          String   @id @default(uuid())
  description String
  status      Status   @default(UNKNOWN)
  latitude    Float?
  longitude   Float?
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])
  logs        IncidentLog[]

  @@index([mountainId])
}

enum LocationType {
  AID_ROOM @map("AID ROOM")
  HUT
  LODGE
  TRAIL
  LIFT
  OTHER
}

model IncidentLog {
  id             String       @id @default(uuid())
  incidentId     String
  incident       Incident     @relation(fields: [incidentId], references: [id])
  employeeId     String
  employee       Employee     @relation(fields: [employeeId], references: [id])
  mountainId     String
  mountain       Mountain     @relation(fields: [mountainId], references: [id])
  locationType   LocationType
  locationId     String
  locationStatus String
  startTime      DateTime
  endTime        DateTime
  onSceneTime    DateTime?
  stableTime     DateTime?
  transportTime  DateTime?
  dryRun         Boolean      @default(false)
  dryRunTime     DateTime?
  equipmentUsed  IncidentLogEquipment[]
  lift           Lift?        @relation("LiftIncidentLog", fields: [locationId], references: [id], map: "LiftIncidentLog_fk")
  trail          Trail?       @relation("TrailIncidentLog", fields: [locationId], references: [id], map: "TrailIncidentLog_fk")
  lodge          Lodge?       @relation("LodgeIncidentLog", fields: [locationId], references: [id], map: "LodgeIncidentLog_fk")
  hut            Hut?         @relation("HutIncidentLog", fields: [locationId], references: [id], map: "HutIncidentLog_fk")
  aidRoom        AidRoom?     @relation("AidRoomIncidentLog", fields: [locationId], references: [id], map: "AidRoomIncidentLog_fk")

  @@index([incidentId])
  @@index([employeeId])
  @@index([mountainId])
  @@index([locationId, locationType])
}

model IncidentLogEquipment {
  id            String       @id @default(uuid())
  incidentLogId String
  equipmentId   String
  mountainId    String
  mountain      Mountain @relation(fields: [mountainId], references: [id])
  usedAt        DateTime     @default(now())
  notes         String?
  incidentLog   IncidentLog  @relation(fields: [incidentLogId], references: [id])
  equipment     Equipment    @relation(fields: [equipmentId], references: [id])

  @@index([incidentLogId])
  @@index([equipmentId])
  @@index([mountainId])
}

model LiftCheck {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])
  liftId      String
  lift        Lift     @relation(fields: [liftId], references: [id])
  notes       String?

  @@index([employeeId])
  @@index([mountainId])
  @@index([liftId])
}

model TrailCheck {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])
  trailId     String
  trail       Trail    @relation(fields: [trailId], references: [id])
  notes       String?

  @@index([employeeId])
  @@index([mountainId])
  @@index([trailId])
}

model HutCheck {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])
  hutId       String
  hut         Hut      @relation(fields: [hutId], references: [id])
  notes       String?

  @@index([employeeId])
  @@index([mountainId])
  @@index([hutId])
}

model AidRoomCheck {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])
  aidRoomId   String
  aidRoom     AidRoom  @relation(fields: [aidRoomId], references: [id])
  notes       String?

  @@index([employeeId])
  @@index([mountainId])
  @@index([aidRoomId])
}

model EquipmentCheck {
  id           String   @id @default(uuid())
  date         DateTime @default(now())
  employeeId   String
  employee     Employee @relation(fields: [employeeId], references: [id])
  mountainId   String
  mountain     Mountain @relation(fields: [mountainId], references: [id])
  equipmentId  String
  equipment    Equipment @relation(fields: [equipmentId], references: [id])
  notes        String?

  @@index([employeeId])
  @@index([mountainId])
  @@index([equipmentId])
}