generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LocationType {
  AidRoom   @map("Aid Room")
  Hut
  Lodge
  Lift
  Trail
  Mountain
  Other
}

enum Status {
  Open
  Closed
  OnHold      @map("On Hold")
  Unknown
}

enum IncidentStatus {
  Standby
  Reported
  InProgress    @map("In Progress")
  Resolved
  Unknown
}

enum EquipmentStatus {
  Operational
  InService          @map("In Service")
  OutOfService       @map("Out Of Service")
  InUse              @map("In Use")
  Cleaning
  NeedsInspection    @map("Needs Inspection")
  PendingRepair      @map("Pending Repair")
  UnderMaintenance   @map("Under Maintenance")
  Lost
  Damaged
  Retired
  Standby
}

enum LiftType {
  Chair
  Gondola
  Surface
  Rope
  Conveyor
  Other
}

enum TrailCondition {
  MachineGroomed    @map("Machine Groomed") 
  HardPack          @map("Hard Pack")
  PackedPowder      @map("Packed Powder")
  Powder
  Moguls
  Natural
  Glades
  Closed
}

enum TrailDifficulty {
  GreenCircle         @map("Green Circle")
  BlueSquare          @map("Blue Square")
  BlackDiamond        @map("Black Diamond")
  DoubleBlackDiamond  @map("Double Black Diamond")
  TerrainPark         @map("Terrain Park")
  RaceCourse          @map("Race Course")
}

enum Department {
  Patrol
  LiftOperations      @map("Lift Operations")
  Dispatch
  Maintenance
  Administration
  Other
}

enum AreaType {
  BaseArea
  MountainArea
  Summit
  Other
}

model Area {
  id          String    @id @default(uuid())
  mountainId  String
  name        String
  type        AreaType
  description String?

  mountain   Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  
  locations   Location[] @relation("AreaLocation")

  @@index([mountainId])
}

model Location {
  id            String       @id @default(uuid())
  mountainId    String
  name          String

  areaId        String?
  area          Area?         @relation("AreaLocation", fields: [areaId], references: [id])

  entityId      String?
  entityType    LocationType

  mountain      Mountain     @relation("MountainLocation", fields: [mountainId], references: [id], onDelete: Cascade)


  hours         Hours[]
  equipment     Equipment[]
  incidents     Incident[]

  @@index([entityType])
  @@index([mountainId, entityType])
  @@index([areaId])
  @@index([mountainId, areaId, entityType])
}

model Hours {
  id          String       @id @default(uuid())
  locationId  String
  location    Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)

  dayOfWeek   Int?         // Day of the week (1 = Monday, 7 = Sunday, null for specific dates)
  date        DateTime?    // Specific date for holidays or exceptions (null for regular days)
  openTime    DateTime?
  closeTime   DateTime?
  status      Status        @default(Open) 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([locationId, dayOfWeek, date])
}

model Mountain {
  id                String   @id @default(uuid())
  name              String   @unique
  latitude          Decimal?
  longitude         Decimal?
  height            Int
  phoneNumber       String
  address           String
  city              String
  state             String
  zipcode           String
  openingDate       DateTime?
  closingDate       DateTime?
  weather           Weather[]
  locations         Location[] @relation("MountainLocation")

  areas             Area[]
  aidRooms          AidRoom[]
  aidRoomChecks     AidRoomCheck[]
  huts              Hut[]
  hutChecks         HutCheck[]
  lodges            Lodge[]
  lifts             Lift[]
  liftChecks        LiftCheck[]
  trails            Trail[]
  
  trailChecks       TrailCheck[]
  equipmentChecks   EquipmentCheck[]
  incidents         Incident[]
  equipment         Equipment[]

  employeeAssignments     EmployeeMountainAssignment[]
  dispatcherAssignments   DispatcherAssignment[]
  incidentEquipmentUsageLog    IncidentEquipmentUsageLog[]
  equipmentServiceLogs    EquipmentServiceLog[]
}

model Weather {
  id            String    @id @default(uuid())
  mountainId    String
  mountain   Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  date          DateTime  @default(now())

  temperature   Float
  windSpeed     Float
  windDirection String?
  visibility    Float?
  conditions    String
  snowfallRecent Float?
  snowfall24h   Float?
  snowfall7d    Float?

  createdAt     DateTime @default(now())
  updatedAt     DateTime  @updatedAt
}

model EmployeeMountainAssignment {
  id          String    @id @default(uuid())
  employeeId  String
  mountainId  String
  assignedAt  DateTime @db.Date

  employee    Employee  @relation(fields: [employeeId], references: [id])
  mountain   Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)

  @@index([mountainId])
  @@index([employeeId])
  @@unique([employeeId, mountainId])
}

model DispatcherAssignment {
  id           String     @id @default(uuid())
  employeeId   String
  mountainId   String
  assignedAt   DateTime @db.Date

  employee     Employee   @relation(fields: [employeeId], references: [id])
  mountain     Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([mountainId])
  @@unique([employeeId, mountainId, assignedAt])
}

enum EmployeeRoles {
  Supervisor
  AdvancedPatroller
  HillChief
  Specialist
  Trainer
  Director
}

model Role {
  id          String   @id @default(uuid())
  department  Department
  name        String
  title       String
  position    String
  level       Int?
  permissions String[]        // Array of permissions (e.g., ["CREATE_INCIdENT", "ASSIGN_EQUIPMENT"])

  employees   Employee[]
  employeeRole  EmployeeRole[]

  @@unique([department, name])
}

model EmployeeRole {
  id         String   @id @default(uuid())
  employeeId String
  roleId     String

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([employeeId, roleId])
}

model Employee {
  id                String     @id @default(uuid())
  employeeIdNumber  Int        @unique
  email             String     @unique
  phoneNumber       String
  name              String
  roleId            String?
  role              Role?       @relation(fields: [roleId], references: [id])

  additionalRoles   EmployeeRole[]

  mountainAssignments   EmployeeMountainAssignment[]
  dispatcherAssignments DispatcherAssignment[]

  incidents             Incident[]    @relation("IncidentEmployees")
  aidRoomChecks         AidRoomCheck[]
  hutChecks             HutCheck[]
  liftChecks            LiftCheck[]
  trailChecks           TrailCheck[]
  equipmentChecks       EquipmentCheck[]
  equipmentServiceLogs  EquipmentServiceLog[]
}

model Lift {
  id          String   @id @default(uuid())
  mountainId  String
  name        String
  type        LiftType
  status      Status   @default(Unknown)
  capacity    Int
  latitude    Decimal?
  longitude   Decimal?

  mountain    Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  liftChecks  LiftCheck[]

  @@index([mountainId])
  @@unique([name, type])
  @@unique([mountainId, name])
}

model Trail {
  id          String   @id @default(uuid())
  mountainId  String
  name        String
  difficulty  TrailDifficulty
  status      Status   @default(Unknown)
  length      Float
  latitude    Decimal?
  longitude   Decimal?
  condition   TrailCondition   @default(Closed)

  mountain    Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  trailChecks TrailCheck[]

  @@index([mountainId])
  @@unique([mountainId, name])
}

model Lodge {
  id          String   @id @default(uuid())
  mountainId  String
  name        String
  capacity    Int
  latitude    Decimal?
  longitude   Decimal?
  status      Status   @default(Unknown)

  mountain    Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)

  @@index([mountainId])
  @@unique([mountainId, name])
}

model Hut {
  id          String   @id @default(uuid())
  mountainId  String
  name        String
  status      Status   @default(Unknown)
  latitude    Decimal?
  longitude   Decimal?

  mountain    Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  hutChecks   HutCheck[]

  @@index([mountainId])
  @@unique([mountainId, name])
}

model AidRoom {
  id             String       @id @default(uuid())
  mountainId     String
  name           String
  status         Status       @default(Unknown)
  latitude       Decimal?
  longitude      Decimal?

  mountain       Mountain     @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  aidRoomChecks  AidRoomCheck[]   

  @@index([mountainId])
  @@unique([mountainId, name])
}

model EquipmentServiceLog {
  id             String   @id @default(uuid())
  mountainId     String
  equipmentId    String
  employeeId     String?

  status         EquipmentStatus   @default(Operational)
  changedAt      DateTime @default(now())
  notes          String?

  mountain       Mountain  @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  employee       Employee? @relation(fields: [employeeId], references: [id])
  equipment      Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mountainId, equipmentId])
}

model Equipment {
  id          String   @id @default(uuid())
  name        String
  type        String
  number      Int?
  description String?
  status      EquipmentStatus   @default(Operational)
  picture     String?
  cost        Float?
  latitude    Decimal?
  longitude   Decimal?
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id])

  locationId      String?
  location        Location? @relation(fields: [locationId], references: [id])

  dateAdded               DateTime @default(now())
  incidentEquipmentUsageLogs   IncidentEquipmentUsageLog[]    
  equipmentChecks         EquipmentCheck[]
  equipmentServiceLogs    EquipmentServiceLog[]

  @@unique([mountainId, number])
  @@index([mountainId, locationId])
}

model Incident {
  id             String       @id @default(uuid())
  description    String
  status         IncidentStatus   @default(Reported)
  latitude       Decimal?
  longitude      Decimal?
  mountainId     String
  mountain       Mountain     @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  startTime      DateTime     @default(now())
  endTime        DateTime?
  onSceneTime    DateTime?
  stableTime     DateTime?
  transportTime  DateTime?
  emptyRun       Boolean      @default(false)
  emptyRunAt     DateTime?
  incidentEquipmentUsageLog  IncidentEquipmentUsageLog[]

  locationType  String
  locationId    String
  entityId      String
  location      Location @relation(fields: [locationId], references: [id])

  employees     Employee[] @relation("IncidentEmployees")

  @@index([mountainId, locationId])
  @@index([mountainId, id, startTime])
  @@index([mountainId, startTime])
  @@index([locationId, startTime])
}

model IncidentEquipmentUsageLog {
  id            String       @id @default(uuid())
  usedAt        DateTime     @default(now())
  notes         String?
  mountainId    String
  equipmentId   String
  incidentId    String

  mountain      Mountain     @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  incident      Incident     @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  equipment     Equipment    @relation(fields: [equipmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mountainId, incidentId])
  @@index([mountainId, equipmentId])
  @@index([mountainId, usedAt])
  
}

model LiftCheck {
  id          String   @id @default(uuid())
  recordedAt  DateTime @default(now())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  liftId      String
  lift        Lift     @relation(fields: [liftId], references: [id], onDelete: Cascade)
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([liftId])
  @@index([mountainId, recordedAt, employeeId])

  @@index([mountainId, createdAt])
  @@index([liftId, createdAt])
}

model TrailCheck {
  id          String   @id @default(uuid())
  recordedAt  DateTime @default(now())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  trailId     String
  trail       Trail    @relation(fields: [trailId], references: [id], onDelete: Cascade)
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([trailId])
  @@index([mountainId, recordedAt, employeeId])

  @@index([mountainId, createdAt])
  @@index([trailId, createdAt])
}

model HutCheck {
  id          String   @id @default(uuid())
  recordedAt  DateTime @default(now())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  hutId       String
  hut         Hut      @relation(fields: [hutId], references: [id], onDelete: Cascade)
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hutId])
  @@index([mountainId, recordedAt, employeeId])

  @@index([mountainId, createdAt])
  @@index([hutId, createdAt])
}

model AidRoomCheck {
  id          String   @id @default(uuid())
  recordedAt  DateTime @default(now())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  mountainId  String
  mountain    Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  aidRoomId   String
  aidRoom     AidRoom  @relation(fields: [aidRoomId], references: [id], onDelete: Cascade)
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([aidRoomId])
  @@index([mountainId, recordedAt, employeeId])

  @@index([mountainId, createdAt])
  @@index([aidRoomId, createdAt])
}

model EquipmentCheck {
  id           String   @id @default(uuid())
  recordedAt   DateTime @default(now())
  employeeId   String
  employee     Employee @relation(fields: [employeeId], references: [id])
  mountainId   String
  mountain     Mountain @relation(fields: [mountainId], references: [id], onDelete: Cascade)
  equipmentId  String
  equipment    Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([equipmentId])
  @@index([mountainId, recordedAt, employeeId])

  @@index([mountainId, createdAt])
  @@index([equipmentId, createdAt])
}